Time taken to transcribe: 85.65485191345215 seconds
And there are a few cool ones. Um, let me tell you this. Keira Mooney was born in Ireland. 14 years she did ballet, she jumped away from it. And so when I asked the coolest thing that, you know, some cool things that happened to her, she said, I fell down and had to have stitches. Yeah, I see that. So, but no, it's really cool. You're gonna love her. The, um, this, this dude is so patient. He sat there forever trying to teach me to say his name. Um, Shivan? That do that for me? How'd that feel? That was good? Alright, um, and I'm not doing that again, because I got through it. Um, and the last name is Nihon? I'm done. Brother's exhausted. How's that? You good? You know what, I'm gonna come, y'all gonna have to come to New Orleans and start naming some of our streets. Cause, cause we got cool street names. You know, Chocotoolis is actually one of our streets. Who's been to New Orleans? You know the Chocotoolis? Right? Now I'm gonna ask you a quick task before we get to the top. I'm gonna say, I'm gonna spell a word, you tell me. B-U-R-G-U-N-D-Y. Ah, good. Who was that? Hey, dude, I can't see. Red Shirt, that dude right there, I can't see. Like, we got a sticker left, just like, put it on his head. That's good. Yes, it's not Burgundy, it's Burgundy. Uh, we have some great street names, some wonderful street names. And, and so we're really confident. Like, we have the Greek Muses. Do we know any of the Greek Muses? Anybody know any of the Greek, the nine Greek Muses? Nobody. See, y'all just went to Kodin School, y'all ain't with the regular school. Nobody. Nobody learned. Calliope? Oh, that, is that Canada? No. I knew, but not even in college. Oh, man. You are speaking of our two-way to Canada. I'm like, you're gonna get it today. Oh, my goodness, yes. Yes, and the good thing is you're Canadian, so you can't fight back. All right. That was rude. I'm sorry. That's not even, right, because you're not even Canadian, are you? That's right, you're American, but you live in Canadian land. All right, that's cool, man. I like that. All right, we're going to get you tomorrow. Are you morning or evening? What are you? Anything. What's that? Anything. Oh, we're going to wrap up with you. Oh, yeah. So we've got these wonderful people. Now, he does soccer, right? You know you love soccer, right? You love soccer. Soccer, and his favorite team, anybody want to guess his favorite team? He said United. Oh, you're right. One more try. He said Liverpool. Yep, there it is, Man City. Manchester City. Oh, oh, oh. Forget the presentation. We're going to get a fight. All right, bend your hands together for our only tag team of the day, making a lot of noise for Kira and Strive. No, she didn't. She did. I'm going to punch you, y'all. I'm going to watch. That's it. Soccer, you do that. Take up the team. Your favorite team is what? Manchester City. Oh. Man City, fire them. Awesome. Hi, everybody. We're so excited to get the chance to talk to you today. I hope you're having a great day of day one at Team React so far. My name is Kira, and this is my co-presenter, Shivan, and we're so excited to get to kind of close out this first day. So a little bit about us before we get started. Like I said before, I'm Kira Mooney. I'm a software engineer at Microsoft, and I work as one of the maintainers of the React Native for Windows platform. I primarily focus on accessibility, I drive our package releases, and I'm also a maintainer of the very popular WebView community module. I help maintain all of the Windows source code there. And then my co-presenter, Shivan, is also a software engineer at Microsoft, and he'll introduce himself a little bit further on in the presentation. So we're all here because we love React Native. There are so many great app experiences that are shipped on this platform. We've heard a lot today about amazing features of the platform and amazing developer experience. But what if you could harness all of the goodness of React Native and be able to build desktop apps? And even further, what if you could take your current, existing mobile apps on React Native and be able to bring them to desktop with minimal coding effort? Well, this exists, and that effort is known as React Native for Desktop. And today our goal here is to share a little bit more context about what that platform is. We're also going to talk a little bit about some of the current work being done on the platform. And then we'll share a little bit about current in-production experiences running on React Native for Desktop. And our hope today is, as you're walking out of the conference hall and heading off to the mixer, you're going to walk away with three key takeaways. The first is that you can build desktop applications with React Native. The second is that many Microsoft products are currently running on React Native. And the third is that as you build React Native applications for mobile, you want to build a desktop, too. So I just mentioned React Native for Desktop and React Native for Windows. Could I see a show of hands in the audience, who's heard of React Native for Desktop before? Okay, a good number of hands. Raise your hand again if you've ever tried using React Native for Desktop. Okay, still a pretty good number of hands, but definitely fewer. So let's talk a little bit about what React Native for Windows is for those of you who haven't heard of it before. React Native for Windows is a part of a larger effort known as React Native for Desktop, and it's made up of two packages, React Native macOS and React Native Windows. And these are out-of-tree additions to React Native that add the additional target of the macOS and the Windows operating system. Both of these platforms are maintained in open source by Microsoft developers, and we currently have API parity for both of the platforms, and work is currently underway to bring Fabric and Window Architecture to React Native for Desktop as well. So you might be asking yourself, that all sounds great, but does React Native Windows work? And is it viable to have industry-grade apps in production? Well, to show that that is the case, let's take a look at an example. This is the Windows start menu, and I'll ask you to take a look at these two screenshots and see if you can spot which sections of this application are built with React Native. And most likely you're not going to be able to spot what those sections are. So on the next slide here, I've gone and highlighted in a dashed rectangle which sections of the start menu are currently running on React Native. And that's the start menu's recommended section. As you can see in these screenshots, there really is a seamless look and feel between the sections of the start menu that were built with the traditional Windows tech stack, and the sections of the start menu that were built with React Native, which is really exciting to see. As another example, let's take a look at the settings application. This is the settings account page, and in this demo, we're going to walk through what that page looks like. And this page was entirely built using React Native for Windows. Once again, you can see super seamless Windows look and feel, and once again, key Microsoft experiences that are running on this platform. So what are some of the initial takeaways here? Number one, Windows is betting on React Native, or betting on this platform, because we're choosing to trust this platform with not only some experiences at Microsoft, but some of our key experiences for our users. So let's talk a little bit about what was the journey to get here, and what were some of the challenges along the way in building the React Native for Windows platform. First off was the challenge of playing catch up. So the React Native for Desktop effort was started after React Native had already existed. So our first phase was to really bring ourselves up to that state of API parity and play catch up with what was happening upstream. The second thing was being able to remain synced with what was happening upstream as new changes, new features, new applications came in from core. Ultimately, our goal with facing this challenge was that all of the value of React Native should also be available in React Native for Windows. The second challenge was native look and feel. If all of you are using React Native, having a near native look and feel in your app experience is probably something of value to you. That also matters to us internally at Microsoft. And so visual coherence, native look and feel was the next challenge that we really took a look at. We ended up building a couple of key modules in order to support native look and feel within React Native for Windows. The first one here was a community module known as React Native SAML. Now SAML is the name that we use to describe the UI library that is used for all of the Windows OS UI components. And so React Native SAML was built as a React Native community module to expose all of those SAML components in React Native for Windows. And this community module is available to external and internal developers alike in the community. And so if you'd like to play around with a React Native for desktop app, you can make use of it as well. The second module that we implemented was UI React Native. Once again, the goal of this was to add another option for getting that Windows look and feel in your native applications. So what UI React Native actually focuses on taking the current set of core components that the platform offers, things like view, text, etc., and adding JavaScript styling on top of those core components to be able to deliver controls that look like Windows controls to a React Native user. And then finally, we also support a number of the other kind of cross-platform modules in the platform, things like point of view and date picker, etc., etc. The big takeaway here is all of this is in the community for the community to use, internal and external developers alike, and Windows gets to gain digital coherence in the process as well. Okay. And the final challenge that we hit was being able to bring Microsoft quality standards to the product. Apps shipped on Windows in general have to live up to the Windows quality standards, especially those being shipped by Microsoft. We want to make sure that all of our developers are able to give a great experience to their users. Now, Jivin, a little bit later in the presentation, is going to talk about some of these Microsoft quality standards holistically, but I'm going to go ahead and dive in to one of those quality standards specifically, which is accessibility. So let's look at that specific quality standard pillar and talk a little bit about how do we handle accessibility for you. Before we can talk about what we did within React Native Windows, let's take a look at what happens in regards to accessibility within React Native and the core platform itself. So within React Native, there's a number of accessibility props and methods and APIs that developers have access to in their applications, elements like accessible, focusable, set accessibility focus, the list goes on. The second thing is that in React Native, there's a key focus on the primary input method being touch. This was a key thing for us to note as we went into designing React Native for desktop because we wanted to make sure that we understood the transition that in desktop, the primary input method shifts over to keyboard and mouse input. Okay, so we've talked about what's happening in React Native, but what's happening and what's expected in terms of accessibility behavior when it comes to Windows? So for Windows, Microsoft apps are all evaluated on their accessibility. This criteria can include screen reader behavior, keyboard navigation, theming, and more. And apps must account, like I mentioned on the last slide, for keyboard, mouse, and other controller input. And then finally, for our app teams, internally, whatever selected app platform we choose, it must be able to produce compliant apps that ship great experiences to all users. So let's talk about the journey that we took to build React Native Windows and how it offered a great accessibility experience. The first thing is API parity, so making sure that we implemented all of React Native's great accessibility-related methods. The next thing was to add additional Windows-specific APIs to the platform. This included adding a rich, customized keyboard experience and customized mouse experience, making sure those APIs were exposed to our developers. And then additionally, while React Native has light theme and dark theme, Windows also has high-contrast mode. So on these screenshots, you can see an example of high-contrast mode in action. On the left, we have that same Windows Settings Accounts page I showed earlier in dark mode. And on the right, you can see that same application in the high-contrast mode of the dust theme. And you can notice some of the differences visually in these two screenshots. Before I mention that, one of the big, important things about bringing React Native into experiences within the Windows OS was visual coherence and offering that kind of native look and feel, and it was also very important to us that visual coherence carried over into the high-contrast modes as well. So we exposed and built an API called AppTheme, which allows applications to detect if they're in high-contrast mode, and if so, which specific high-contrast colors should that application be using. Okay. The next thing in the journey to bringing great accessibility to Windows was to match Windows accessibility behavior and make sure the norms match the Windows OS in comparison to iOS and Android. So we have a table on this screen that dives a little bit into some of the screen reader focus behavior changes between iOS and Android, Windows, macOS, et cetera. The big takeaway from all this information is that we've done the research on accessibility so that you don't have to. We want you to be able to have and offer a great experience to your users for the apps that you're developing out of the box and have that be available and ready for internal and external developers alike. Cool. So at this point, we have all the functionality we need on the platform side to offer great accessibility, but the next step was to really make sure that our messaging to our developers and our developer documentation was super solid in order to communicate to our developers building applications what are the accessibility APIs to take advantage of and use in their applications. This is where messaging to all of our app teams has been super critical in the process. So we have great accessibility. We have great apps. The next step was to make sure that we were continually validating to make sure that our accessibility was continuing to be in a great place. So this is the React Native Gallery app. It's an app running on React Native Windows, and it's actually currently in the Microsoft Store if you have any interest in downloading it for yourself. And this app showcases the current set of components that are supported on React Native Windows and all different kinds of samples that you can search through. And this app is regularly validated in accessibility to make sure that we continue to offer not only a compliant experience, but a delightful experience to all users. So what is the status today? Currently we have a number of apps running on React Native for Windows that are compliant and are offering a great accessibility experience. I just want to show you two examples at the beginning of the presentation, which would be the Start menu and the Windows Settings Accounts page. On this slide, we're also showcasing an example of the Xbox PC app, which is written entirely in React Native Windows. And on this specific demo, we can see that app running in high contrast mode and using keyboard navigation to navigate the app. So some of that great accessibility functionality in action in the demo. So what are the big things to take away from all of this? We've done the work so that you get out-of-the-box accessibility. And you might be watching all this and wondering, hey, you know, you mentioned macOS at the beginning of the presentation. Has all of this been done for macOS as well? And the answer to that is yes. Today we focused in on Windows, but macOS has also done work, applied to their same operating system to make sure they're offering great accessibility. And we'll have some call-outs at the end for recent macOS talks if you'd like to learn more. But as I mentioned earlier, accessibility isn't the only quality standard that we look at and that we care about in terms of being able to ship a great platform. And so to expand on some of the other quality standards that we've dived into in the platform, as well as to talk a little bit more about some of the cross-platform experiences that we're currently shipping at Microsoft on React Native, I'll go ahead and hand it off to my co-presenter, Shivan. Thanks, Kira. I'm Shivan, I'm a software engineer at the Office product group at Microsoft, where I focus on React Native Android and our JavaScript front-end architecture. So as Kira previously talked about, there's a lot of challenges that come in maintaining out-of-the-box platforms like React Native for desktop. And this is especially important for us since we use these platforms to build our own experiences. And so there's a number of quality standards that we need to uphold before we ship anything at Microsoft. So we ensure that these quality standards are upheld within the platform itself so that you don't have to worry about them and you can focus more on doing your best work. And accessibility isn't the only standard we uphold, as you said. There's more, as you can see. So reliability, version support, localization, security and privacy, and the native look and feel are just a few of the quality standards that we pay close attention to. So adoption of our platforms by our own apps and the community depends on React Native not only offering its value, but also whether it lives to these quality standards so that we can ship efficiently and scale and deliver value to our customers and so can you. And all this is especially important at the scale we work on. So few companies have as many products and services as Microsoft, and few have as many users of them. So on your screen are a few of the Microsoft products that use React and React Native to reach billions of users across desktop and mobile, that is Windows, Mac OS, iOS and Android. These are the main four platforms that we're going to look at. And these apps include Microsoft Office, Outlook, Teams, Windows OS, Power Apps, Xbox and many more. Now, all of these applications vary differently, vary from each other. They are built for different purposes and they vary in how they were built, when they were built and how they use React Native. So some of these are greenfield apps which are built entirely using React Native. An example of that is the Xbox PC app that Chiara talked about earlier. And we also have applications that are not built in React Native but host many React Native experiences. They're known as brownfield apps. An example of that is the Microsoft Office apps. So what you see here is the commence experience in Microsoft Word on Windows. And this is also known as modern commence. And by that, I'm talking about this. So this pane is a React Native experience which runs within a non-React Native application. It's hosted in a separate pane of its own within the larger application. And this is only one of several React Native experiences that our Microsoft Office apps are currently hosting across desktop and mobile. So let's talk about cross-platform development. Using React Native was a natural choice for developing these cross-platform experiences in our apps. However, going cross-platform has some challenges. Firstly, when we talk of these applications like Office, Windows OS, we're talking of some of the biggest support bases in the world with hundreds of millions of lines of code in production. And most of this code is written in languages like C++ and C Sharp. Plus, most of these applications are really old. Like, most have been in use since before we invested in React Native. And many of them are older than React Native itself. As a matter of fact, Microsoft Office still has code from the 1980s in production. Which also means it's older than me. So clearly it's infeasible to use the Greenfield approach and completely transition such huge legacy applications fully to React Native. How then are we able to build React Native experiences in an application like Microsoft Office? For that, we build most of our applications as round-feud. However, there's one additional factor that becomes important when you go cross-platform. And that's code sharing. All four of the desktop and mobile platforms, Windows, Mac OS, iOS, and Android, are very different to each other. And natively they are very different. And overall it should be as easy as possible for a feature developer to create experiences for one platform and make it work across all the platforms. And across different applications while mostly using the same code base. So the modern commerce experience I showed you earlier is not just cross-platform, but it's cross-app. It's used across Word, Excel, PowerPoint, and it's just one code base. So we want to be sharing as much code as possible. There's another important factor that comes into play when going cross-platform. And that's something I briefly mentioned earlier. And that is native look and feel. So desktop and mobile also have different design languages. And for every platform we want our experiences to look native and tailored to the platform that they run on. And finally, we want to be able to validate and test these experiences across these different platforms. So the developer experience should allow for quick and seamless validation across platforms so that any developer with an existing mobile application can easily add desktop support, test, and iterate quickly while ideally just working with the JavaScript code and not requiring any domain knowledge of the desktop platforms. So how do we develop and enable cross-platform experiences in these applications using React Native? To better answer this question, I'm going to walk us through one of our most widely shared React Native experiences. And that's the Persona card. So Persona card is an experience within the Microsoft Office applications that gives you a review of your account details and your recent activity. To showcase this experience, I want to show a quick demo. So this is the Microsoft Word Android application. And so once you're logged in, so... Here. Go. Yeah. So this is the Microsoft Word Android application. Once you're logged in, Persona card can be accessed from the top left. And this screen that you see right here, this is the Persona card. So this entire screen. And you can see your contact information right here. If you're in an organization, then you can see your organization details. You can also monitor your recent activity, like files, edited, and emails, and so on. So this is a React Native application within the broader Microsoft Word application in this case. And you can see that almost near native performance and native look and feel tailored to the Android platform. So Persona card is currently available across all the four desktop and mobile platforms. And it is in use across the Microsoft Office apps like Word, Excel, PowerPoint, Teams, Outlook, SharePoint, OneNote, and so on. But if you look closely, there are subtle differences in how Persona card appears across these platforms. So for example, if you see, it made more sense to keep the experience at full speed on iOS and Android compared to our experience on Windows and Mac OS. Another example is the way the corners are rounded. So if you see, like, Mac OS, the rounded corners are more natural. While we also have an expand button to maximize Persona card. On desktop, the maximization happens by clicking on the profile icon. And that opens up a Persona card in a modal view, which is also people to React Native. In mobile, the back button, as you see, is also tailored to the respective platforms. And so is the design of the show organization button. So Windows 1 just has text. Mac and iOS have that arrow. For Android, it's different. So all of this is tailored to their respective platforms. And this is all from one code base. So feature developers just need to learn React Native. And then they can use React Native or React Native for desktop platforms to make their apps work across these platforms and across applications. And even though we have these subtle design customizations to make the experience look native, the majority of the code here is shared across the platforms. And that is why it was so compelling for us to use React Native and actively maintain React Native for desktop. But we missed one important factor, which I previously mentioned, and that is testing and validation across platforms. So testing and validation can be time-consuming at scale, especially when you have a lot of native code to deal with. Developers just want to be able to validate their experience without building the rest of the native code base, which in the case of Microsoft Office, for example, that's really huge. So even upgrading your experience may require changing native platform files, which can be pretty if you're working on a new platform or extending to a new platform. And if you have multiple experiences, like if you have a Chrome field experience, so maintaining test apps for all of them and keeping them up to date with every upgrade is also a time-consuming process. So ideally, developers should be able to test and validate quickly across platforms while only working in the JavaScript code and keeping a consistent developer experience across the platforms. For this, one of the investments we made is the React Native Test App. So React Native Test App, also known as RDA, is essentially a platform as a package. So it provides you test apps for all of the desktop and mobile platforms. So you can think of it as a thin layer that's consolidating all of the platform-level hosting logic for all those platforms, but it also acts as an allocator. So what that means is you only deal with the JavaScript and you don't have to deal with the native code anymore. But if you do have native code, you still have full control over it. And testing on multiple platforms is as simple as adding a dependency to React Native, React Native Windows, or React Native Mac OS in the RDA package.json, or we have a CLI in which you can also pick what platforms you want to test on. You can test on newer or older React Native versions, and this supports Windows, Mac OS, iOS, and Android. You can get started today by just adding React Native Test App to your project and running init test app, and you can find more details of this at the Microsoft React Native Test App repo on GitHub, or check some of our previous talks on this. Lastly, I'll quickly mention a few other investments that we have in developer experience. The first is Fluent UI React Native, or Fluent. It's an open-source, cross-platform, React Native component library that uses Microsoft's Fluent design system, and it allows you to build beautiful experiences that feel natural and tailored to the platform, like we talked about. The components in Fluent come packed with accessibility, platform-optimized theming, and design tokens out of the box, and they work well with this top React Native component, and they're highly performant. So I recommend using these if you're interested in checking out the Fluent design system, or you want platform-optimized components for your applications, and you can find more details on the GitHub link. Another investment that we have has been React RxKit, which some of you would have known or used. It's a set of highly performant and scalable tools for React Native developers, and it's got some great tools like AlignDevs for dependency management, it has TypeScript validation built in, it supports free-shaking with ESBuild, and much more, so do check it out at aka.ms.rxkit. Both Fluent UI React Native and RxKit are tools that we use internally to build our applications, and we use them to ship apps to millions of people. So these are both open-source projects, and we've really built these for the broader community that you all can use, and so we really welcome suggestions, feedback, and contributions on these tools. So to conclude, and for those who are going to go to work on Monday and want to say, what better business cycle to show? So overall, we really want you to think about desktop. Desktop is heavily invested in React Native across desktop and mobile, and though there are challenges in maintaining an out-of-the-box platform like React Native Windows or React Native MacOS, doing so makes our apps better, it helps make your apps better, and better and more platforms means more scale, even more users, and monetization for your apps. So we're really committed in our investment. And what does that mean? It means ensuring these platforms meet strict quality standards for shipping, such as accessibility, and that they're baked into the platform. And we've talked a lot about accessibility today from the other speakers. And this also means enabling a seamless developer experience so that you can build, validate, and iterate quickly. This means enabling developers to build beautiful platform-customized applications while sharing as much code as possible. And finally, this means doing all of that without requiring domain knowledge of the platform. So whether you've got a Greenfield app that you want to extend to desktop, or a native desktop app, but you want to add cross-platform features, we have you covered. You can just focus on what's important, and that is your product. All of this is to say that React Native Desktop is really built for scale, and more importantly, it's built for you, the community. React Native Desktop today powers experiences in Microsoft, reaching a billion users. And we know first-hand the challenges that come when working with multiple different experiences and making it work at scale. So that is why, through these investments in the platform and the tools, we try to ensure that developers using these platforms, that is you, have a seamless development experience and can really take your applications to the next level. That does not mean you're perfect, though. That is why we really want you all to get involved. So these are all open-source projects, and we really welcome your contributions and feedback to make them better. And finally, we've talked a lot about React Native for Desktop today, but a lot of work has also gone on in React Native Core in the past many months to make it better for everybody using React Native and for maintaining trust in the platform. To know more, check out our very own Loretta Chandra's talk tomorrow on the work that you don't see, where she gives us a more detailed look into these efforts to make React Native 4 better. It's the first talk of the day tomorrow, so don't miss it. Finally, to know more and to see our past talks, head over to our website, aka.msc.com. I also, like you mentioned, two talks. So one was at AppJS. For those of you who attended our desktop, you saw this, but there was a talk on React Native from MacOS from my colleague Saad, and this was a good in-depth talk on React Native for MacOS. This is a great talk for anybody looking to extend to Mac, and I highly encourage you to check out the recording for this talk. It's up on YouTube. There's another talk tomorrow at ChainReact by Chris Kroft on how NetApp migrated the Messenger desktop apps from Electron to React Native, and I would encourage you to attend this talk as well. Finally, it was our pleasure to talk more about React Native for desktop and share our own experiences. So please do reach out to us on GitHub and Discord. We can't wait to hear what you all are doing with it, and we really value contributions and feedback to all of these platforms. Thank you so much for organizing this conference and for inviting us. Thanks again for the great introduction. Thanks all for listening.